;;System with Generic Operations
(load "4th.scm")

;;Generic Arithmetic Operations
(define (add x y) (apply-generic (quote add) x y))
(define (sub x y) (apply-generic (quote sub) x y))
(define (mul x y) (apply-generic (quote mul) x y))
(define (div x y) (apply-generic (quote div) x y))

;;Handling ordinary numbers
(define (install-scheme-number-package)
    (define (tag x) (attach-tag (quote scheme-number) x))
    (put (quote add) (quote (scheme-number scheme-number))
        (lambda (x y) (tag (+ x y))))
    (put (quote sub) (quote (scheme-number scheme-number))
        (lambda (x y) (tag (- x y))))
    (put (quote mul) (quote (scheme-number scheme-number))
        (lambda (x y) (tag (* x y))))
    (put (quote div) (quote (scheme-number scheme-number))
        (lambda (x y) (tag (/ x y))))
    (put (quote make) (quote scheme-number) (lambda (x) (tag x)))
    (quote done))

(define (make-scheme-number n)
    ((get (quote make) (quote scheme-number)) n))

;;Handling rational numbers
(define (install-rational-package)
    ;;internal procedure
    (define (numer x) (car x))
    (define (denom x) (cdr x))
    (define (make-rational n d)
        (let ((g (gcd n d))) (cons (/ n g) (/ d g))))
    (define (add-rational x y)
        (make-rational (+ (* (numer x) (denom y))
                                       (* (numer y) (denom x)))
                                  (* (denom x) (denom y))))
    (define (sub-rational x y)
        (make-rational (- (* (numer x) (denom y))
                                       (* (numer y) (denom y)))
                                  (* (denom x) (denom y))))
    (define (mul-rational x y)
        (make-rational (* (numer x) (denom y))
                                  (* (numer y) (denom x))))
    (define (div-rational x y)
        (make-rational (* (numer x) (denom y))
                                  (* (denom x) (numer y))))
    ;; interface to rest of the System
    (define (tag x) (attach-tag (quote rational) x))
    (put (quote add) (quote (rational rational))
        (lambda (x y) (tag (add-rational x y))))
    (put (quote sub) (quote (rational rational))
        (lambda (x y) (tag (sub-rational x y))))
    (put (quote mul) (quote (rational rational))
        (lambda (x y) (tag (mul-rational x y))))
    (put (quote div) (quote (rational rational))
        (lambda (x y) (tag (div-rational x y))))
    (put (quote make) (quote rational)
        (lambda (n d) (tag (make-rational n d))))
    (quote done))

(define (make-rational n d)
    ((get (quote make) (quote rational) n d)))

;;Handling complex numbers
(define (install-complex-package)
    ;;imported procedures from rectanguler and polar packages
    (define (make-from-real-imag x y)
        ((get (quote make-from-real-imag) (quote rectanguler)) x y))
    (define (make-from-mag-ang r a)
        ((get (quote make-from-mag-ang) (quote polar)) r a))
    ;; internal procedures
    (define (add-complex z1 z2)
        (make-from-real-imag (+ (real-part z1) (real-part z2))
                                               (+ (imag-part z1) (imag-part z2))))
    (define (sub-complex z1 z2)
        (make-from-real-imag (- (real-part z1) (real-part z2))
                                               (- (imag-part z1) (imag-part z2))))
    (define (mul-complex z1 z2)
        (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                                              (+ (angle z1) (angle z2))))
    (define (div-complex z1 z2)
        (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                                              (- (angle z1) (angle z2))))
    ;; interface of the rest of the System
    (define (tag z) (attach-tag (quote complex) z))
    (put (quote add) (quote (complex complex))
        (lambda (x y) (tag (add-complex x y))))
    (put (quote sub) (quote (complex complex))
        (lambda (x y) (tag (sub-complex x y))))
    (put (quote mul) (quote (complex complex))
        (lambda (x y) (tag (mul-complex x y))))
    (put (quote div) (quote (complex complex))
         (lambda (x y) (tag (div-complex x y))))
    (put (quote make-from-real-imag) (quote complex)
        (lambda (x y) (tag (make-from-real-imag x y))))
    (put (quote make-from-mag-ang) (quote complex)
        (lambda (r a) (tag (make-from-mag-ang r a))))
    (quote done))

(define (make-complex-from-real-imag x y)
    ((get (quote make-from-real-imag) (quote complex)) x y))
(define (make-complex-from-mag-ang r a)
    ((get (quote make-from-mag-ang) (quote complex)) r a))